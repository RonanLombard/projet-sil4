package fr.iut2.sil4.data;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.Column;
import org.apache.torque.TorqueException;
import org.apache.torque.criteria.CriteriaInterface;
import org.apache.torque.om.mapper.RecordMapper;


/**
 * Maps ResultSet rows into Professeur objects.
 *
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Jan 20 16:44:53 CET 2014]
 *
 */
public class BaseProfesseurRecordMapper implements RecordMapper<Professeur>
{

    /** The class log. */
    private static Log log
            = LogFactory.getLog(BaseProfesseurRecordMapper.class);

    /**
     * Constructs the object from the current row in the resultSet.
     *
     * @param resultSet the resultSet to operate on, already pointing
     *        to the correct row. Not null.
     * @param a possible offset in the columns to be considered
     *        (if previous columns contain other objects),
     *        or 0 for no offset.
     * @param criteria The criteria which created the result set.
     *        If set, the attributes to set in the data object
     *        are determined from the select columns in the criteria;
     *        if no matching column can be found, null is returned.
     *        If not set, all of the table's columns are read from the
     *        result set in the order defined in the table definition.
     *
     * @return the mapped object, not null.
     *
     * @throws TorqueException when reading fields from the RecordSet fails
     *         or if a Criteria is passed which contains select columns other
     *         than the columns in the professeur table.
     */
    public Professeur processRow(
                ResultSet resultSet,
                int offset,
                CriteriaInterface<?> criteria)
            throws TorqueException
    {
        Professeur professeur = new Professeur();

        try 
        {
            professeur.setLoading(true);
            if (criteria == null)
            {
                professeur.setProfesseurId(
                        getProfesseurId(resultSet, offset + 1));
                professeur.setNom(
                        getNom(resultSet, offset + 2));
                professeur.setPrenom(
                        getPrenom(resultSet, offset + 3));
                professeur.setLogin(
                        getLogin(resultSet, offset + 4));
                professeur.setPassword(
                        getPassword(resultSet, offset + 5));
                professeur.setMatiereId(
                        getMatiereId(resultSet, offset + 6));
            }
            else
            {
                // try to get columns to be mapped
                // from criteria's select columns
                boolean columnMapped = false;
                int totalOffset = offset + 1;
                List<Column> selectColumns = criteria.getSelectColumns();
                List<Column> columnsWithoutOffset = selectColumns.subList(
                        offset, 
                        selectColumns.size());
                for (Column column : columnsWithoutOffset)
                {
                    if (BaseProfesseurPeer.PROFESSEUR_ID.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        professeur.setProfesseurId(
                            getProfesseurId(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseProfesseurPeer.NOM.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        professeur.setNom(
                            getNom(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseProfesseurPeer.PRENOM.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        professeur.setPrenom(
                            getPrenom(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseProfesseurPeer.LOGIN.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        professeur.setLogin(
                            getLogin(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseProfesseurPeer.PASSWORD.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        professeur.setPassword(
                            getPassword(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    else if (BaseProfesseurPeer.MATIERE_ID.getSqlExpression().equals(
                            column.getSqlExpression()))
                    {
                        professeur.setMatiereId(
                            getMatiereId(resultSet, totalOffset));
                        columnMapped = true;
                    }
                    totalOffset++;
                }
                if (!columnMapped)
                {
                    log.debug("no columns to map found in criteria, "
                        + "returning null");
                    return null;
                }
            }
            professeur.setNew(false);
            professeur.setModified(false);
        }
        finally
        {
            professeur.setLoading(false);
        }
        return professeur;
    }

        /**
         * Reads the value of the <code>columnIndex</code>'th column
         * in the <code>resultSet</code> so that it can be used to set
         * the field professeurId in Professeur.
         *
         * @param dbObject the database object to fill, not null.
         * @param resultSet the ResultSet to read from, not null.
         * @param columnIndex the index in the resultSet which should be read.
         *
         * @return the content of the column.
         *
         * @throws SQLException if a problem occurs when reading
         *         from the resultSet.
         */
        protected int getProfesseurId(
                    ResultSet resultSet,
                    int columnIndex)
                throws TorqueException
        {
            try
            {
                return resultSet.getInt(columnIndex);
            }
            catch (SQLException e)
            {
                throw new TorqueException(e);
            }
        }

        /**
         * Reads the value of the <code>columnIndex</code>'th column
         * in the <code>resultSet</code> so that it can be used to set
         * the field nom in Professeur.
         *
         * @param dbObject the database object to fill, not null.
         * @param resultSet the ResultSet to read from, not null.
         * @param columnIndex the index in the resultSet which should be read.
         *
         * @return the content of the column.
         *
         * @throws SQLException if a problem occurs when reading
         *         from the resultSet.
         */
        protected String getNom(
                    ResultSet resultSet,
                    int columnIndex)
                throws TorqueException
        {
            try
            {
                return resultSet.getString(columnIndex);
            }
            catch (SQLException e)
            {
                throw new TorqueException(e);
            }
        }

        /**
         * Reads the value of the <code>columnIndex</code>'th column
         * in the <code>resultSet</code> so that it can be used to set
         * the field prenom in Professeur.
         *
         * @param dbObject the database object to fill, not null.
         * @param resultSet the ResultSet to read from, not null.
         * @param columnIndex the index in the resultSet which should be read.
         *
         * @return the content of the column.
         *
         * @throws SQLException if a problem occurs when reading
         *         from the resultSet.
         */
        protected String getPrenom(
                    ResultSet resultSet,
                    int columnIndex)
                throws TorqueException
        {
            try
            {
                return resultSet.getString(columnIndex);
            }
            catch (SQLException e)
            {
                throw new TorqueException(e);
            }
        }

        /**
         * Reads the value of the <code>columnIndex</code>'th column
         * in the <code>resultSet</code> so that it can be used to set
         * the field login in Professeur.
         *
         * @param dbObject the database object to fill, not null.
         * @param resultSet the ResultSet to read from, not null.
         * @param columnIndex the index in the resultSet which should be read.
         *
         * @return the content of the column.
         *
         * @throws SQLException if a problem occurs when reading
         *         from the resultSet.
         */
        protected String getLogin(
                    ResultSet resultSet,
                    int columnIndex)
                throws TorqueException
        {
            try
            {
                return resultSet.getString(columnIndex);
            }
            catch (SQLException e)
            {
                throw new TorqueException(e);
            }
        }

        /**
         * Reads the value of the <code>columnIndex</code>'th column
         * in the <code>resultSet</code> so that it can be used to set
         * the field password in Professeur.
         *
         * @param dbObject the database object to fill, not null.
         * @param resultSet the ResultSet to read from, not null.
         * @param columnIndex the index in the resultSet which should be read.
         *
         * @return the content of the column.
         *
         * @throws SQLException if a problem occurs when reading
         *         from the resultSet.
         */
        protected String getPassword(
                    ResultSet resultSet,
                    int columnIndex)
                throws TorqueException
        {
            try
            {
                return resultSet.getString(columnIndex);
            }
            catch (SQLException e)
            {
                throw new TorqueException(e);
            }
        }

        /**
         * Reads the value of the <code>columnIndex</code>'th column
         * in the <code>resultSet</code> so that it can be used to set
         * the field matiereId in Professeur.
         *
         * @param dbObject the database object to fill, not null.
         * @param resultSet the ResultSet to read from, not null.
         * @param columnIndex the index in the resultSet which should be read.
         *
         * @return the content of the column.
         *
         * @throws SQLException if a problem occurs when reading
         *         from the resultSet.
         */
        protected int getMatiereId(
                    ResultSet resultSet,
                    int columnIndex)
                throws TorqueException
        {
            try
            {
                return resultSet.getInt(columnIndex);
            }
            catch (SQLException e)
            {
                throw new TorqueException(e);
            }
        }


}
