package fr.iut2.sil4.data;

import java.io.Serializable;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.BooleanKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.om.ColumnAccessByName;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.util.Transaction;
import org.apache.commons.lang.ObjectUtils;


/**
 * Table des matieres
 *
 * This class was autogenerated by Torque on:
 *
 * [Mon Jan 20 16:44:52 CET 2014]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to Matiere
 */
public abstract class BaseMatiere 
    implements Persistent, Serializable, ColumnAccessByName
{
    /** Serial version */
    private static final long serialVersionUID = 1390232692106L;



    /** ID matiere */
    private int matiereId = 0;

    /** Nom matiere */
    private String nom = null;

    /** Whether this object was modified after loading or after last save. */
    private boolean modified = true;

    /** 
     * Whether this object was loaded from the database or already saved 
     * (false) or whether it is not yet in the database(true).
     */
    private boolean isNew = true;

    /** Flag which indicates whether this object is currently saving. */
    private boolean saving = false;

    /** 
     * Flag which indicates whether this object is currently loaded
     * from the database. 
     */
    private boolean loading = false;

    /** 
     * Flag which indicates whether this object was deleted from the database.
     * Note that this flags does not always display the current database state,
     * there is no magical connection between this flag and the database.
     */
    private boolean deleted = false;



    /** Defines the collProfesseurs field. */
    protected List<Professeur> collProfesseurs = null;

    /** Defines the collMatiereClasses field. */
    protected List<MatiereClasse> collMatiereClasses = null;

    /** Defines the collNotes field. */
    protected List<Note> collNotes = null;



    /**
     * Get the value of matiereId.
     * The field is described as follows: 
     * ID matiere
     *
     * @return int
     */
    public int getMatiereId() 
    {
        
        return matiereId;
    }

    /**
     * Set the value of matiereId.
     * The field is described as follows: 
     * ID matiere
     *
     * @param v new value
     */
    public void setMatiereId(int v)
    {
        if (this.matiereId != v)
        {
            setModified(true);
        }

        this.matiereId = v;

        // update associated objects in collProfesseurs 
        if (collProfesseurs != null)
        {
            for (int i = 0; i < collProfesseurs.size(); i++)
            {
                ((Professeur) collProfesseurs.get(i))
                        .setMatiereId(v);
            }
        }
        // update associated objects in collMatiereClasses 
        if (collMatiereClasses != null)
        {
            for (int i = 0; i < collMatiereClasses.size(); i++)
            {
                ((MatiereClasse) collMatiereClasses.get(i))
                        .setMatiereId(v);
            }
        }
        // update associated objects in collNotes 
        if (collNotes != null)
        {
            for (int i = 0; i < collNotes.size(); i++)
            {
                ((Note) collNotes.get(i))
                        .setMatiereId(v);
            }
        }

    }
    
    /**
     * Get the value of nom.
     * The field is described as follows: 
     * Nom matiere
     *
     * @return String
     */
    public String getNom() 
    {
        
        return nom;
    }

    /**
     * Set the value of nom.
     * The field is described as follows: 
     * Nom matiere
     *
     * @param v new value
     */
    public void setNom(String v)
    {
        if (!ObjectUtils.equals(this.nom, v))
        {
            setModified(true);
        }

        this.nom = v;


    }
    

    /**
     * Returns whether the object has ever been saved.  This will
     * be false, if the object was retrieved from storage or was created
     * and then saved.
     *
     * @return true, if the object has never been persisted.
     */
    public boolean isNew()
    {
        return isNew;
    }

    /**
     * Sets whether the object has ever been saved.
     *
     * @param isNew true if the object has never been saved, false otherwise.
     */
    public void setNew(boolean isNew)
    {
        this.isNew = isNew;
    }

    /**
     * Returns whether the object has been modified.
     *
     * @return True if the object has been modified.
     */
    public boolean isModified()
    {
        return modified;
    }

    /**
     * Sets whether the object has been modified.
     *
     * @param modified true if the object has been modified, false otherwise.
     */
    public void setModified(boolean modified)
    {
        this.modified = modified;
    }

    /**
     * Sets the modified state for the object to be false.
     */
    public void resetModified()
    {
        modified = false;
    }


    /**
     * Returns whether this object is currently saving.
     *
     * @return true if this object is currently saving, false otherwise.
     */
    public boolean isSaving()
    {
        return saving;
    }

    /**
     * Sets whether this object is currently saving.
     *
     * @param saving true if this object is currently saving, false otherwise.
     */
    public void setSaving(boolean saving)
    {
        this.saving = saving;
    }


    /**
     * Returns whether this object is currently being loaded from the database.
     *
     * @return true if this object is currently loading, false otherwise.
     */
    public boolean isLoading()
    {
        return loading;
    }

    /**
     * Sets whether this object is currently being loaded from the database.
     *
     * @param loading true if this object is currently loading, false otherwise.
     */
    public void setLoading(boolean loading)
    {
        this.loading = loading;
    }


    /**
     * Returns whether this object was deleted from the database.
     * Note that this getter does not automatically reflect database state,
     * it will be set to true by Torque if doDelete() was called with this 
     * object. Bulk deletes and deletes via primary key do not change
     * this flag. Also, if doDelete() was called on an object which does
     * not exist in the database, the deleted flag is set to true even if
     * it was not deleted.
     *
     * @return true if this object was deleted, false otherwise.
     */
    public boolean isDeleted()
    {
        return deleted;
    }

    /**
     * Sets whether this object was deleted from the database.
     *
     * @param deleted true if this object was deleted, false otherwise.
     */
    public void setDeleted(boolean deleted)
    {
        this.deleted = deleted;
    }




    /**
     * Initializes the cache collProfesseurs for referenced objects.
     * This, means, if collProfesseurs is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collProfesseurs, not null.
     */
    public List<Professeur> initProfesseurs()
    {
        if (collProfesseurs == null)
        {
            collProfesseurs = new ArrayList<Professeur>();
        }
        return collProfesseurs;
    }

    /**
     * Checks whether the cache collProfesseurs for referenced objects has either been
     * loaded from the database or has been manually initialized.
     */
    public boolean isProfesseursInitialized()
    {
        return (collProfesseurs != null);
    }


    /**
     * Method called to associate a Professeur object to this object
     * through the collProfesseurs foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addProfesseur(Professeur toAdd)
        throws TorqueException
    {
        toAdd.setMatiere((Matiere) this);
        getProfesseurs().add(toAdd);
    }

    /**
     * Method called to associate a Professeur object to this object
     * through the collProfesseurs foreign key attribute using connection.
     *
     * @param l Professeur
     * @throws TorqueException
     */
    public void addProfesseur(Professeur l, Connection con) throws TorqueException
    {
        getProfesseurs(con).add(l);
        l.setMatiere((Matiere) this);
    }
    
    /**
     * The criteria used to select the current contents of collProfesseurs
     */
    private Criteria lastProfesseurCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProfesseurs(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Professeur> getProfesseurs()
        throws TorqueException
    {
        if (collProfesseurs == null)
        {
            collProfesseurs = getProfesseurs(new Criteria());
        }
        return collProfesseurs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere has previously
     * been saved, it will retrieve related collProfesseurs from storage.
     * If this BaseMatiere is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<Professeur> getProfesseurs(Criteria criteria) throws TorqueException
    {
        if (collProfesseurs == null)
        {
            if (isNew())
            {
               initProfesseurs();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.ProfesseurPeer.MATIERE_ID, getMatiereId() );
                collProfesseurs = fr.iut2.sil4.data.ProfesseurPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(fr.iut2.sil4.data.ProfesseurPeer.MATIERE_ID, getMatiereId() );
                if (lastProfesseurCriteria == null 
                        || !lastProfesseurCriteria.equals(criteria))
                {
                    collProfesseurs = fr.iut2.sil4.data.ProfesseurPeer.doSelect(criteria);
                }
            }
        }
        lastProfesseurCriteria = criteria;

        return collProfesseurs;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProfesseurs(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<Professeur> getProfesseurs(Connection con) throws TorqueException
    {
        if (collProfesseurs == null)
        {
            collProfesseurs = getProfesseurs(new Criteria(), con);
        }
        return collProfesseurs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere has previously
     * been saved, it will retrieve the related Professeur Objects 
     * from storage.
     * If this BaseMatiere is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<Professeur> getProfesseurs(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProfesseurs == null)
        {
            if (isNew())
            {
               initProfesseurs();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.ProfesseurPeer.MATIERE_ID, getMatiereId());
                collProfesseurs = fr.iut2.sil4.data.ProfesseurPeer.doSelect(criteria, con);
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(fr.iut2.sil4.data.ProfesseurPeer.MATIERE_ID, getMatiereId());
                if (!lastProfesseurCriteria.equals(criteria))
                {
                    collProfesseurs = fr.iut2.sil4.data.ProfesseurPeer.doSelect(criteria, con);
                }
            }
        }
        lastProfesseurCriteria = criteria;

        return collProfesseurs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Professeur> getProfesseursJoinMatiere(Criteria criteria) throws TorqueException
    {
        return getProfesseursJoinMatiere(criteria, null);
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere is new, it will return
     * an empty collection; or if this BaseMatiere has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Professeur> getProfesseursJoinMatiere(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collProfesseurs == null)
        {
            if (isNew())
            {
                initProfesseurs();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.ProfesseurPeer.MATIERE_ID, getMatiereId() );
                collProfesseurs = fr.iut2.sil4.data.ProfesseurPeer.doSelectJoinMatiere(criteria, connection);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(fr.iut2.sil4.data.ProfesseurPeer.MATIERE_ID, getMatiereId() );
            if (!lastProfesseurCriteria.equals(criteria))
            {
                collProfesseurs = fr.iut2.sil4.data.ProfesseurPeer.doSelectJoinMatiere(criteria, connection);
            }
        }
        lastProfesseurCriteria = criteria;

        return collProfesseurs;
    }

    /**
     * Initializes the cache collMatiereClasses for referenced objects.
     * This, means, if collMatiereClasses is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collMatiereClasses, not null.
     */
    public List<MatiereClasse> initMatiereClasses()
    {
        if (collMatiereClasses == null)
        {
            collMatiereClasses = new ArrayList<MatiereClasse>();
        }
        return collMatiereClasses;
    }

    /**
     * Checks whether the cache collMatiereClasses for referenced objects has either been
     * loaded from the database or has been manually initialized.
     */
    public boolean isMatiereClassesInitialized()
    {
        return (collMatiereClasses != null);
    }


    /**
     * Method called to associate a MatiereClasse object to this object
     * through the collMatiereClasses foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addMatiereClasse(MatiereClasse toAdd)
        throws TorqueException
    {
        toAdd.setMatiere((Matiere) this);
        getMatiereClasses().add(toAdd);
    }

    /**
     * Method called to associate a MatiereClasse object to this object
     * through the collMatiereClasses foreign key attribute using connection.
     *
     * @param l MatiereClasse
     * @throws TorqueException
     */
    public void addMatiereClasse(MatiereClasse l, Connection con) throws TorqueException
    {
        getMatiereClasses(con).add(l);
        l.setMatiere((Matiere) this);
    }
    
    /**
     * The criteria used to select the current contents of collMatiereClasses
     */
    private Criteria lastMatiereClasseCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getMatiereClasses(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<MatiereClasse> getMatiereClasses()
        throws TorqueException
    {
        if (collMatiereClasses == null)
        {
            collMatiereClasses = getMatiereClasses(new Criteria());
        }
        return collMatiereClasses;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere has previously
     * been saved, it will retrieve related collMatiereClasses from storage.
     * If this BaseMatiere is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<MatiereClasse> getMatiereClasses(Criteria criteria) throws TorqueException
    {
        if (collMatiereClasses == null)
        {
            if (isNew())
            {
               initMatiereClasses();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.MatiereClassePeer.MATIERE_ID, getMatiereId() );
                collMatiereClasses = fr.iut2.sil4.data.MatiereClassePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(fr.iut2.sil4.data.MatiereClassePeer.MATIERE_ID, getMatiereId() );
                if (lastMatiereClasseCriteria == null 
                        || !lastMatiereClasseCriteria.equals(criteria))
                {
                    collMatiereClasses = fr.iut2.sil4.data.MatiereClassePeer.doSelect(criteria);
                }
            }
        }
        lastMatiereClasseCriteria = criteria;

        return collMatiereClasses;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getMatiereClasses(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<MatiereClasse> getMatiereClasses(Connection con) throws TorqueException
    {
        if (collMatiereClasses == null)
        {
            collMatiereClasses = getMatiereClasses(new Criteria(), con);
        }
        return collMatiereClasses;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere has previously
     * been saved, it will retrieve the related MatiereClasse Objects 
     * from storage.
     * If this BaseMatiere is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<MatiereClasse> getMatiereClasses(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collMatiereClasses == null)
        {
            if (isNew())
            {
               initMatiereClasses();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.MatiereClassePeer.MATIERE_ID, getMatiereId());
                collMatiereClasses = fr.iut2.sil4.data.MatiereClassePeer.doSelect(criteria, con);
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(fr.iut2.sil4.data.MatiereClassePeer.MATIERE_ID, getMatiereId());
                if (!lastMatiereClasseCriteria.equals(criteria))
                {
                    collMatiereClasses = fr.iut2.sil4.data.MatiereClassePeer.doSelect(criteria, con);
                }
            }
        }
        lastMatiereClasseCriteria = criteria;

        return collMatiereClasses;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<MatiereClasse> getMatiereClassesJoinMatiere(Criteria criteria) throws TorqueException
    {
        return getMatiereClassesJoinMatiere(criteria, null);
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere is new, it will return
     * an empty collection; or if this BaseMatiere has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<MatiereClasse> getMatiereClassesJoinMatiere(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collMatiereClasses == null)
        {
            if (isNew())
            {
                initMatiereClasses();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.MatiereClassePeer.MATIERE_ID, getMatiereId() );
                collMatiereClasses = fr.iut2.sil4.data.MatiereClassePeer.doSelectJoinMatiere(criteria, connection);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(fr.iut2.sil4.data.MatiereClassePeer.MATIERE_ID, getMatiereId() );
            if (!lastMatiereClasseCriteria.equals(criteria))
            {
                collMatiereClasses = fr.iut2.sil4.data.MatiereClassePeer.doSelectJoinMatiere(criteria, connection);
            }
        }
        lastMatiereClasseCriteria = criteria;

        return collMatiereClasses;
    }

    /**
     * Initializes the cache collNotes for referenced objects.
     * This, means, if collNotes is null when this operation is called, it is
     * initialized with an empty collection, otherwise it remains unchanged. 
     *
     * @return the (possibly new) content of the field collNotes, not null.
     */
    public List<Note> initNotes()
    {
        if (collNotes == null)
        {
            collNotes = new ArrayList<Note>();
        }
        return collNotes;
    }

    /**
     * Checks whether the cache collNotes for referenced objects has either been
     * loaded from the database or has been manually initialized.
     */
    public boolean isNotesInitialized()
    {
        return (collNotes != null);
    }


    /**
     * Method called to associate a Note object to this object
     * through the collNotes foreign key attribute.
     * If the associated objects were not retrieved before
     * and this object is not new, the associated objects are retrieved
     * from the database before adding the <code>toAdd</code> object.
     *
     * @param toAdd the object to add to the associated objects, not null.
     *
     * @throws TorqueException if retrieval of the associated objects fails.
     * @throws NullPointerException if toAdd is null.
     */
    public void addNote(Note toAdd)
        throws TorqueException
    {
        toAdd.setMatiere((Matiere) this);
        getNotes().add(toAdd);
    }

    /**
     * Method called to associate a Note object to this object
     * through the collNotes foreign key attribute using connection.
     *
     * @param l Note
     * @throws TorqueException
     */
    public void addNote(Note l, Connection con) throws TorqueException
    {
        getNotes(con).add(l);
        l.setMatiere((Matiere) this);
    }
    
    /**
     * The criteria used to select the current contents of collNotes
     */
    private Criteria lastNoteCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNotes(new Criteria())
     *
     * @return the collection of associated objects
     * @throws TorqueException
     */
    public List<Note> getNotes()
        throws TorqueException
    {
        if (collNotes == null)
        {
            collNotes = getNotes(new Criteria());
        }
        return collNotes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere has previously
     * been saved, it will retrieve related collNotes from storage.
     * If this BaseMatiere is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List<Note> getNotes(Criteria criteria) throws TorqueException
    {
        if (collNotes == null)
        {
            if (isNew())
            {
               initNotes();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.NotePeer.MATIERE_ID, getMatiereId() );
                collNotes = fr.iut2.sil4.data.NotePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(fr.iut2.sil4.data.NotePeer.MATIERE_ID, getMatiereId() );
                if (lastNoteCriteria == null 
                        || !lastNoteCriteria.equals(criteria))
                {
                    collNotes = fr.iut2.sil4.data.NotePeer.doSelect(criteria);
                }
            }
        }
        lastNoteCriteria = criteria;

        return collNotes;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNotes(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<Note> getNotes(Connection con) throws TorqueException
    {
        if (collNotes == null)
        {
            collNotes = getNotes(new Criteria(), con);
        }
        return collNotes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere has previously
     * been saved, it will retrieve the related Note Objects 
     * from storage.
     * If this BaseMatiere is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List<Note> getNotes(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collNotes == null)
        {
            if (isNew())
            {
               initNotes();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.NotePeer.MATIERE_ID, getMatiereId());
                collNotes = fr.iut2.sil4.data.NotePeer.doSelect(criteria, con);
            }
        }
        else
        {
             // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                criteria.and(fr.iut2.sil4.data.NotePeer.MATIERE_ID, getMatiereId());
                if (!lastNoteCriteria.equals(criteria))
                {
                    collNotes = fr.iut2.sil4.data.NotePeer.doSelect(criteria, con);
                }
            }
        }
        lastNoteCriteria = criteria;

        return collNotes;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere is new, it will return
     * an empty collection; or if this thisObjectClassName has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Note> getNotesJoinMatiere(Criteria criteria) throws TorqueException
    {
        return getNotesJoinMatiere(criteria, null);
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this BaseMatiere is new, it will return
     * an empty collection; or if this BaseMatiere has previously
     * been saved, it will retrieve the related objects from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can change the access modifier to public
     * by overriding this method in the child class.
     */
    protected List<Note> getNotesJoinMatiere(Criteria criteria, Connection connection)
        throws TorqueException
    {
        if (collNotes == null)
        {
            if (isNew())
            {
                initNotes();
            }
            else
            {
                criteria.and(fr.iut2.sil4.data.NotePeer.MATIERE_ID, getMatiereId() );
                collNotes = fr.iut2.sil4.data.NotePeer.doSelectJoinMatiere(criteria, connection);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            criteria.and(fr.iut2.sil4.data.NotePeer.MATIERE_ID, getMatiereId() );
            if (!lastNoteCriteria.equals(criteria))
            {
                collNotes = fr.iut2.sil4.data.NotePeer.doSelectJoinMatiere(criteria, connection);
            }
        }
        lastNoteCriteria = criteria;

        return collNotes;
    }




    private static final List<String> FIELD_NAMES;

    static
    {
        List<String> fieldNames
                = new ArrayList<String>();
        fieldNames.add("MatiereId");
        fieldNames.add("Nom");
        FIELD_NAMES = Collections.unmodifiableList(fieldNames);
    }

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static List<String> getFieldNames()
    {
        return FIELD_NAMES;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("MatiereId"))
        {
            return new Integer(getMatiereId());
        }
        if (name.equals("Nom"))
        {
            return getNom();
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("MatiereId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setMatiereId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Nom"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setNom((String) value);
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(fr.iut2.sil4.data.MatierePeer.MATIERE_ID))
        {
            return new Integer(getMatiereId());
        }
        if (name.equals(fr.iut2.sil4.data.MatierePeer.NOM))
        {
            return getNom();
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (fr.iut2.sil4.data.MatierePeer.MATIERE_ID.getSqlExpression().equals(name))
        {
            return setByName("MatiereId", value);
        }
        if (fr.iut2.sil4.data.MatierePeer.NOM.getSqlExpression().equals(name))
        {
            return setByName("Nom", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getMatiereId());
        }
        if (pos == 1)
        {
            return getNom();
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
        if (position == 0)
        {
            return setByName("MatiereId", value);
        }
        if (position == 1)
        {
            return setByName("Nom", value);
        }
        return false;
    }



    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @param toSave the object to be saved, not null.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save() throws TorqueException
    {
        save(MatierePeer.DATABASE_NAME);
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.
     *
     * @param toSave the object to be saved, not null.
     * @param dbName the name of the database to which the object
     *        should be saved.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(String dbName) 
            throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /**
     * Stores an object in the database.  If the object is new,
     * it is inserted; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally.
     *
     * @param toSave the object to be saved, not null.
     * @param con the connection to use for saving the object, not null.
     *
     * @throws TorqueException if an error occurs during saving.
     */
    public void save(Connection con) 
            throws TorqueException
    {
        if (isSaving())
        {
            return;
        }
        try
        {
            setSaving(true);
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    MatierePeer.doInsert((Matiere) this, con);
                    setNew(false);
                }
                else
                {
                    MatierePeer.doUpdate((Matiere) this, con);
                }
            }

            if (isProfesseursInitialized())
            {
                for (Professeur collProfesseurs : getProfesseurs())
                {
                    collProfesseurs.save(con);
                }
            }
            if (isMatiereClassesInitialized())
            {
                for (MatiereClasse collMatiereClasses : getMatiereClasses())
                {
                    collMatiereClasses.save(con);
                }
            }
            if (isNotesInitialized())
            {
                for (Note collNotes : getNotes())
                {
                    collNotes.save(con);
                }
            }
        }
        finally
        {
            setSaving(false);
        }
    }




    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key matiereId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
        setMatiereId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
        setMatiereId(Integer.parseInt(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getMatiereId());
    }



    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Matiere copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using a connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public Matiere copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public Matiere copy(boolean deepcopy) throws TorqueException
    {
        Matiere matiere = new Matiere();

        return copyInto(matiere, deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public Matiere copy(boolean deepcopy, Connection con) throws TorqueException
    {
        Matiere matiere = new Matiere();

        return copyInto(matiere, deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    public Matiere copyInto(Matiere copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    public Matiere copyInto(Matiere copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected Matiere copyInto(Matiere copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setMatiereId(0);
        copyObj.setNom(nom);

        if (deepcopy)
        {
            if (collProfesseurs != null)
            {
                for (int i = 0; i < collProfesseurs.size(); i++)
                {
                    Professeur obj = collProfesseurs.get(i);
                    copyObj.addProfesseur(obj.copy());
                }
            }
            else
            {
                copyObj.collProfesseurs = null;
            }
            if (collMatiereClasses != null)
            {
                for (int i = 0; i < collMatiereClasses.size(); i++)
                {
                    MatiereClasse obj = collMatiereClasses.get(i);
                    copyObj.addMatiereClasse(obj.copy());
                }
            }
            else
            {
                copyObj.collMatiereClasses = null;
            }
            if (collNotes != null)
            {
                for (int i = 0; i < collNotes.size(); i++)
                {
                    Note obj = collNotes.get(i);
                    copyObj.addNote(obj.copy());
                }
            }
            else
            {
                copyObj.collNotes = null;
            }
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    public Matiere copyInto(Matiere copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setMatiereId(0);
        copyObj.setNom(nom);

        if (deepcopy)
        {
            for (Professeur obj : getProfesseurs(con))
            {
                copyObj.addProfesseur(obj.copy());
            }
            for (MatiereClasse obj : getMatiereClasses(con))
            {
                copyObj.addMatiereClasse(obj.copy());
            }
            for (Note obj : getNotes(con))
            {
                copyObj.addNote(obj.copy());
            }
        }
        return copyObj;
    }

    /** The Peer class */
    private static final fr.iut2.sil4.data.MatierePeer peer
            = new fr.iut2.sil4.data.MatierePeer();

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public fr.iut2.sil4.data.MatierePeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return fr.iut2.sil4.data.MatierePeer.getTableMap();
    }



    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Matiere:\n");
        str.append("matiereId = ")
           .append(getMatiereId())
           .append("\n");
        str.append("nom = ")
           .append(getNom())
           .append("\n");
        return(str.toString());
    }

    /**
     * Compares the primary key of this instance with the key of another.
     *
     * @param toCompare The object to compare to.
     * @return Whether the primary keys are equal and the object have the
     *         same class.
     */
    public boolean equals(Object toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (!getClass().equals(toCompare.getClass()))
        {
            return false;
        }
        Matiere other = (Matiere) toCompare;
        if (getPrimaryKey() == null || other.getPrimaryKey() == null)
        {
            return false;
        }
        return getPrimaryKey().equals(other.getPrimaryKey());
    }

    /**
     * If the primary key is not <code>null</code>, return the hashcode of the
     * primary key.  Otherwise calls <code>Object.hashCode()</code>.
     *
     * @return an <code>int</code> value
     */
    public int hashCode()
    {
        ObjectKey ok = getPrimaryKey();
        if (ok == null)
        {
            return super.hashCode();
        }

        return ok.hashCode();
    }



    /**
     * Compares the content of this object to another object
     *
     * @param toCompare The object to compare to.
     * @return true if all of the columns in the other object have 
     *         the same value as the objects in this class.
     */
    public boolean valueEquals(Matiere toCompare)
    {
        if (toCompare == null)
        {
            return false;
        }
        if (this == toCompare)
        {
            return true;
        }
        if (this.matiereId != toCompare.getMatiereId())
        {
            return false;
        }
        if (!ObjectUtils.equals(this.nom, toCompare.getNom()))
        {
            return false;
        }
        return true;
    }



}
